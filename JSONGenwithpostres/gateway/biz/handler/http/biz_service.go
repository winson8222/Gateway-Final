// Code generated by hertz generator.

	package http
	
	import (
		"context"
		"log"
	
		"gateway/biz/model/http"
	
		"github.com/cloudwego/hertz/pkg/app"
		"github.com/cloudwego/hertz/pkg/protocol/consts"
	)
	
	func BizMethod1(ctx context.Context, c *app.RequestContext) {
		var req http.BizRequest
		err := c.BindAndValidate(&req)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}

		reqBody, err := c.Body()
		if err != nil {
			log.Fatal(err)
		}

	
		cli := BizServiceGenericClient()
		resp, err := DoBizMethod1(ctx, cli, string(reqBody)) // Pass the generic client and requestContext
		if err != nil {
			c.String(consts.StatusInternalServerError, "Failed to perform generic call")
			return
		}
	
		c.JSON(consts.StatusOK, resp)
	}
	
	func BizMethod2(ctx context.Context, c *app.RequestContext) {
		var req http.BizRequest
		err := c.BindAndValidate(&req)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}

		reqBody, err := c.Body()
		if err != nil {
			log.Fatal(err)
		}

	
		cli := BizServiceGenericClient()
		resp, err := DoBizMethod2(ctx, cli, string(reqBody)) // Pass the generic client and requestContext
		if err != nil {
			c.String(consts.StatusInternalServerError, "Failed to perform generic call")
			return
		}
	
		c.JSON(consts.StatusOK, resp)
	}
	
	func BizMethod3(ctx context.Context, c *app.RequestContext) {
		var req http.BizRequest
		err := c.BindAndValidate(&req)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}

		reqBody, err := c.Body()
		if err != nil {
			log.Fatal(err)
		}

	
		cli := BizServiceGenericClient()
		resp, err := DoBizMethod3(ctx, cli, string(reqBody)) // Pass the generic client and requestContext
		if err != nil {
			c.String(consts.StatusInternalServerError, "Failed to perform generic call")
			return
		}
	
		c.JSON(consts.StatusOK, resp)
	}
	