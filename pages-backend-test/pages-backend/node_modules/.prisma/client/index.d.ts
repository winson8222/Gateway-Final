
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type MicroservicePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    versions: VersionPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    svcname: string
  }, ExtArgs["result"]["microservice"]>
  composites: {}
}

/**
 * Model Microservice
 * 
 */
export type Microservice = runtime.Types.DefaultSelection<MicroservicePayload>
export type VersionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    microservice: MicroservicePayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    vname: string
    idlfile: Buffer
    idlname: string
    microserviceId: string | null
  }, ExtArgs["result"]["version"]>
  composites: {}
}

/**
 * Model Version
 * 
 */
export type Version = runtime.Types.DefaultSelection<VersionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Microservices
 * const microservices = await prisma.microservice.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Microservices
   * const microservices = await prisma.microservice.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.microservice`: Exposes CRUD operations for the **Microservice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Microservices
    * const microservices = await prisma.microservice.findMany()
    * ```
    */
  get microservice(): Prisma.MicroserviceDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.version`: Exposes CRUD operations for the **Version** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Versions
    * const versions = await prisma.version.findMany()
    * ```
    */
  get version(): Prisma.VersionDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.1
   * Query Engine version: b20ead4d3ab9e78ac112966e242ded703f4a052c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Microservice: 'Microservice',
    Version: 'Version'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'microservice' | 'version'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Microservice: {
        operations: {
          findUnique: {
            args: Prisma.MicroserviceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MicroservicePayload> | null
            payload: MicroservicePayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.MicroserviceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MicroservicePayload>
            payload: MicroservicePayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.MicroserviceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MicroservicePayload> | null
            payload: MicroservicePayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.MicroserviceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MicroservicePayload>
            payload: MicroservicePayload<ExtArgs>
          }
          findMany: {
            args: Prisma.MicroserviceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MicroservicePayload>[]
            payload: MicroservicePayload<ExtArgs>
          }
          create: {
            args: Prisma.MicroserviceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MicroservicePayload>
            payload: MicroservicePayload<ExtArgs>
          }
          createMany: {
            args: Prisma.MicroserviceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: MicroservicePayload<ExtArgs>
          }
          delete: {
            args: Prisma.MicroserviceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MicroservicePayload>
            payload: MicroservicePayload<ExtArgs>
          }
          update: {
            args: Prisma.MicroserviceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MicroservicePayload>
            payload: MicroservicePayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.MicroserviceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: MicroservicePayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.MicroserviceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: MicroservicePayload<ExtArgs>
          }
          upsert: {
            args: Prisma.MicroserviceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MicroservicePayload>
            payload: MicroservicePayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.MicroserviceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMicroservice>
            payload: MicroservicePayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.MicroserviceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MicroserviceGroupByOutputType>[]
            payload: MicroservicePayload<ExtArgs>
          }
          count: {
            args: Prisma.MicroserviceCountArgs<ExtArgs>,
            result: $Utils.Optional<MicroserviceCountAggregateOutputType> | number
            payload: MicroservicePayload<ExtArgs>
          }
        }
      }
      Version: {
        operations: {
          findUnique: {
            args: Prisma.VersionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VersionPayload> | null
            payload: VersionPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.VersionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VersionPayload>
            payload: VersionPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.VersionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VersionPayload> | null
            payload: VersionPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.VersionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VersionPayload>
            payload: VersionPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.VersionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VersionPayload>[]
            payload: VersionPayload<ExtArgs>
          }
          create: {
            args: Prisma.VersionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VersionPayload>
            payload: VersionPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.VersionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: VersionPayload<ExtArgs>
          }
          delete: {
            args: Prisma.VersionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VersionPayload>
            payload: VersionPayload<ExtArgs>
          }
          update: {
            args: Prisma.VersionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VersionPayload>
            payload: VersionPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.VersionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: VersionPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.VersionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: VersionPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.VersionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VersionPayload>
            payload: VersionPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.VersionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVersion>
            payload: VersionPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.VersionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VersionGroupByOutputType>[]
            payload: VersionPayload<ExtArgs>
          }
          count: {
            args: Prisma.VersionCountArgs<ExtArgs>,
            result: $Utils.Optional<VersionCountAggregateOutputType> | number
            payload: VersionPayload<ExtArgs>
          }
        }
      }
    }
  } & {
    other: {
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
          payload: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
          payload: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
          payload: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
          payload: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MicroserviceCountOutputType
   */


  export type MicroserviceCountOutputType = {
    versions: number
  }

  export type MicroserviceCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    versions?: boolean | MicroserviceCountOutputTypeCountVersionsArgs
  }

  // Custom InputTypes

  /**
   * MicroserviceCountOutputType without action
   */
  export type MicroserviceCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroserviceCountOutputType
     */
    select?: MicroserviceCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MicroserviceCountOutputType without action
   */
  export type MicroserviceCountOutputTypeCountVersionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VersionWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Microservice
   */


  export type AggregateMicroservice = {
    _count: MicroserviceCountAggregateOutputType | null
    _min: MicroserviceMinAggregateOutputType | null
    _max: MicroserviceMaxAggregateOutputType | null
  }

  export type MicroserviceMinAggregateOutputType = {
    id: string | null
    svcname: string | null
  }

  export type MicroserviceMaxAggregateOutputType = {
    id: string | null
    svcname: string | null
  }

  export type MicroserviceCountAggregateOutputType = {
    id: number
    svcname: number
    _all: number
  }


  export type MicroserviceMinAggregateInputType = {
    id?: true
    svcname?: true
  }

  export type MicroserviceMaxAggregateInputType = {
    id?: true
    svcname?: true
  }

  export type MicroserviceCountAggregateInputType = {
    id?: true
    svcname?: true
    _all?: true
  }

  export type MicroserviceAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Microservice to aggregate.
     */
    where?: MicroserviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Microservices to fetch.
     */
    orderBy?: Enumerable<MicroserviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MicroserviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Microservices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Microservices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Microservices
    **/
    _count?: true | MicroserviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MicroserviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MicroserviceMaxAggregateInputType
  }

  export type GetMicroserviceAggregateType<T extends MicroserviceAggregateArgs> = {
        [P in keyof T & keyof AggregateMicroservice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMicroservice[P]>
      : GetScalarType<T[P], AggregateMicroservice[P]>
  }




  export type MicroserviceGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MicroserviceWhereInput
    orderBy?: Enumerable<MicroserviceOrderByWithAggregationInput>
    by: MicroserviceScalarFieldEnum[]
    having?: MicroserviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MicroserviceCountAggregateInputType | true
    _min?: MicroserviceMinAggregateInputType
    _max?: MicroserviceMaxAggregateInputType
  }


  export type MicroserviceGroupByOutputType = {
    id: string
    svcname: string
    _count: MicroserviceCountAggregateOutputType | null
    _min: MicroserviceMinAggregateOutputType | null
    _max: MicroserviceMaxAggregateOutputType | null
  }

  type GetMicroserviceGroupByPayload<T extends MicroserviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MicroserviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MicroserviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MicroserviceGroupByOutputType[P]>
            : GetScalarType<T[P], MicroserviceGroupByOutputType[P]>
        }
      >
    >


  export type MicroserviceSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    svcname?: boolean
    versions?: boolean | Microservice$versionsArgs<ExtArgs>
    _count?: boolean | MicroserviceCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["microservice"]>

  export type MicroserviceSelectScalar = {
    id?: boolean
    svcname?: boolean
  }

  export type MicroserviceInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    versions?: boolean | Microservice$versionsArgs<ExtArgs>
    _count?: boolean | MicroserviceCountOutputTypeArgs<ExtArgs>
  }


  type MicroserviceGetPayload<S extends boolean | null | undefined | MicroserviceArgs> = $Types.GetResult<MicroservicePayload, S>

  type MicroserviceCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MicroserviceFindManyArgs, 'select' | 'include'> & {
      select?: MicroserviceCountAggregateInputType | true
    }

  export interface MicroserviceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Microservice'], meta: { name: 'Microservice' } }
    /**
     * Find zero or one Microservice that matches the filter.
     * @param {MicroserviceFindUniqueArgs} args - Arguments to find a Microservice
     * @example
     * // Get one Microservice
     * const microservice = await prisma.microservice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MicroserviceFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MicroserviceFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Microservice'> extends True ? Prisma__MicroserviceClient<$Types.GetResult<MicroservicePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__MicroserviceClient<$Types.GetResult<MicroservicePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Microservice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MicroserviceFindUniqueOrThrowArgs} args - Arguments to find a Microservice
     * @example
     * // Get one Microservice
     * const microservice = await prisma.microservice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MicroserviceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MicroserviceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MicroserviceClient<$Types.GetResult<MicroservicePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Microservice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroserviceFindFirstArgs} args - Arguments to find a Microservice
     * @example
     * // Get one Microservice
     * const microservice = await prisma.microservice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MicroserviceFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MicroserviceFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Microservice'> extends True ? Prisma__MicroserviceClient<$Types.GetResult<MicroservicePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__MicroserviceClient<$Types.GetResult<MicroservicePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Microservice that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroserviceFindFirstOrThrowArgs} args - Arguments to find a Microservice
     * @example
     * // Get one Microservice
     * const microservice = await prisma.microservice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MicroserviceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MicroserviceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MicroserviceClient<$Types.GetResult<MicroservicePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Microservices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroserviceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Microservices
     * const microservices = await prisma.microservice.findMany()
     * 
     * // Get first 10 Microservices
     * const microservices = await prisma.microservice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const microserviceWithIdOnly = await prisma.microservice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MicroserviceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MicroserviceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MicroservicePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Microservice.
     * @param {MicroserviceCreateArgs} args - Arguments to create a Microservice.
     * @example
     * // Create one Microservice
     * const Microservice = await prisma.microservice.create({
     *   data: {
     *     // ... data to create a Microservice
     *   }
     * })
     * 
    **/
    create<T extends MicroserviceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MicroserviceCreateArgs<ExtArgs>>
    ): Prisma__MicroserviceClient<$Types.GetResult<MicroservicePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Microservices.
     *     @param {MicroserviceCreateManyArgs} args - Arguments to create many Microservices.
     *     @example
     *     // Create many Microservices
     *     const microservice = await prisma.microservice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MicroserviceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MicroserviceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Microservice.
     * @param {MicroserviceDeleteArgs} args - Arguments to delete one Microservice.
     * @example
     * // Delete one Microservice
     * const Microservice = await prisma.microservice.delete({
     *   where: {
     *     // ... filter to delete one Microservice
     *   }
     * })
     * 
    **/
    delete<T extends MicroserviceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MicroserviceDeleteArgs<ExtArgs>>
    ): Prisma__MicroserviceClient<$Types.GetResult<MicroservicePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Microservice.
     * @param {MicroserviceUpdateArgs} args - Arguments to update one Microservice.
     * @example
     * // Update one Microservice
     * const microservice = await prisma.microservice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MicroserviceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MicroserviceUpdateArgs<ExtArgs>>
    ): Prisma__MicroserviceClient<$Types.GetResult<MicroservicePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Microservices.
     * @param {MicroserviceDeleteManyArgs} args - Arguments to filter Microservices to delete.
     * @example
     * // Delete a few Microservices
     * const { count } = await prisma.microservice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MicroserviceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MicroserviceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Microservices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroserviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Microservices
     * const microservice = await prisma.microservice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MicroserviceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MicroserviceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Microservice.
     * @param {MicroserviceUpsertArgs} args - Arguments to update or create a Microservice.
     * @example
     * // Update or create a Microservice
     * const microservice = await prisma.microservice.upsert({
     *   create: {
     *     // ... data to create a Microservice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Microservice we want to update
     *   }
     * })
    **/
    upsert<T extends MicroserviceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MicroserviceUpsertArgs<ExtArgs>>
    ): Prisma__MicroserviceClient<$Types.GetResult<MicroservicePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Microservices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroserviceCountArgs} args - Arguments to filter Microservices to count.
     * @example
     * // Count the number of Microservices
     * const count = await prisma.microservice.count({
     *   where: {
     *     // ... the filter for the Microservices we want to count
     *   }
     * })
    **/
    count<T extends MicroserviceCountArgs>(
      args?: Subset<T, MicroserviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MicroserviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Microservice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroserviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MicroserviceAggregateArgs>(args: Subset<T, MicroserviceAggregateArgs>): Prisma.PrismaPromise<GetMicroserviceAggregateType<T>>

    /**
     * Group by Microservice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroserviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MicroserviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MicroserviceGroupByArgs['orderBy'] }
        : { orderBy?: MicroserviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MicroserviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMicroserviceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Microservice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MicroserviceClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    versions<T extends Microservice$versionsArgs<ExtArgs> = {}>(args?: Subset<T, Microservice$versionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<VersionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Microservice base type for findUnique actions
   */
  export type MicroserviceFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microservice
     */
    select?: MicroserviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicroserviceInclude<ExtArgs> | null
    /**
     * Filter, which Microservice to fetch.
     */
    where: MicroserviceWhereUniqueInput
  }

  /**
   * Microservice findUnique
   */
  export interface MicroserviceFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MicroserviceFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Microservice findUniqueOrThrow
   */
  export type MicroserviceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microservice
     */
    select?: MicroserviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicroserviceInclude<ExtArgs> | null
    /**
     * Filter, which Microservice to fetch.
     */
    where: MicroserviceWhereUniqueInput
  }


  /**
   * Microservice base type for findFirst actions
   */
  export type MicroserviceFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microservice
     */
    select?: MicroserviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicroserviceInclude<ExtArgs> | null
    /**
     * Filter, which Microservice to fetch.
     */
    where?: MicroserviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Microservices to fetch.
     */
    orderBy?: Enumerable<MicroserviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Microservices.
     */
    cursor?: MicroserviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Microservices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Microservices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Microservices.
     */
    distinct?: Enumerable<MicroserviceScalarFieldEnum>
  }

  /**
   * Microservice findFirst
   */
  export interface MicroserviceFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MicroserviceFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Microservice findFirstOrThrow
   */
  export type MicroserviceFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microservice
     */
    select?: MicroserviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicroserviceInclude<ExtArgs> | null
    /**
     * Filter, which Microservice to fetch.
     */
    where?: MicroserviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Microservices to fetch.
     */
    orderBy?: Enumerable<MicroserviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Microservices.
     */
    cursor?: MicroserviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Microservices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Microservices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Microservices.
     */
    distinct?: Enumerable<MicroserviceScalarFieldEnum>
  }


  /**
   * Microservice findMany
   */
  export type MicroserviceFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microservice
     */
    select?: MicroserviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicroserviceInclude<ExtArgs> | null
    /**
     * Filter, which Microservices to fetch.
     */
    where?: MicroserviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Microservices to fetch.
     */
    orderBy?: Enumerable<MicroserviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Microservices.
     */
    cursor?: MicroserviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Microservices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Microservices.
     */
    skip?: number
    distinct?: Enumerable<MicroserviceScalarFieldEnum>
  }


  /**
   * Microservice create
   */
  export type MicroserviceCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microservice
     */
    select?: MicroserviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicroserviceInclude<ExtArgs> | null
    /**
     * The data needed to create a Microservice.
     */
    data: XOR<MicroserviceCreateInput, MicroserviceUncheckedCreateInput>
  }


  /**
   * Microservice createMany
   */
  export type MicroserviceCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Microservices.
     */
    data: Enumerable<MicroserviceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Microservice update
   */
  export type MicroserviceUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microservice
     */
    select?: MicroserviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicroserviceInclude<ExtArgs> | null
    /**
     * The data needed to update a Microservice.
     */
    data: XOR<MicroserviceUpdateInput, MicroserviceUncheckedUpdateInput>
    /**
     * Choose, which Microservice to update.
     */
    where: MicroserviceWhereUniqueInput
  }


  /**
   * Microservice updateMany
   */
  export type MicroserviceUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Microservices.
     */
    data: XOR<MicroserviceUpdateManyMutationInput, MicroserviceUncheckedUpdateManyInput>
    /**
     * Filter which Microservices to update
     */
    where?: MicroserviceWhereInput
  }


  /**
   * Microservice upsert
   */
  export type MicroserviceUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microservice
     */
    select?: MicroserviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicroserviceInclude<ExtArgs> | null
    /**
     * The filter to search for the Microservice to update in case it exists.
     */
    where: MicroserviceWhereUniqueInput
    /**
     * In case the Microservice found by the `where` argument doesn't exist, create a new Microservice with this data.
     */
    create: XOR<MicroserviceCreateInput, MicroserviceUncheckedCreateInput>
    /**
     * In case the Microservice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MicroserviceUpdateInput, MicroserviceUncheckedUpdateInput>
  }


  /**
   * Microservice delete
   */
  export type MicroserviceDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microservice
     */
    select?: MicroserviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicroserviceInclude<ExtArgs> | null
    /**
     * Filter which Microservice to delete.
     */
    where: MicroserviceWhereUniqueInput
  }


  /**
   * Microservice deleteMany
   */
  export type MicroserviceDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Microservices to delete
     */
    where?: MicroserviceWhereInput
  }


  /**
   * Microservice.versions
   */
  export type Microservice$versionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VersionInclude<ExtArgs> | null
    where?: VersionWhereInput
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    cursor?: VersionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VersionScalarFieldEnum>
  }


  /**
   * Microservice without action
   */
  export type MicroserviceArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microservice
     */
    select?: MicroserviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicroserviceInclude<ExtArgs> | null
  }



  /**
   * Model Version
   */


  export type AggregateVersion = {
    _count: VersionCountAggregateOutputType | null
    _min: VersionMinAggregateOutputType | null
    _max: VersionMaxAggregateOutputType | null
  }

  export type VersionMinAggregateOutputType = {
    id: string | null
    vname: string | null
    idlfile: Buffer | null
    idlname: string | null
    microserviceId: string | null
  }

  export type VersionMaxAggregateOutputType = {
    id: string | null
    vname: string | null
    idlfile: Buffer | null
    idlname: string | null
    microserviceId: string | null
  }

  export type VersionCountAggregateOutputType = {
    id: number
    vname: number
    idlfile: number
    idlname: number
    microserviceId: number
    _all: number
  }


  export type VersionMinAggregateInputType = {
    id?: true
    vname?: true
    idlfile?: true
    idlname?: true
    microserviceId?: true
  }

  export type VersionMaxAggregateInputType = {
    id?: true
    vname?: true
    idlfile?: true
    idlname?: true
    microserviceId?: true
  }

  export type VersionCountAggregateInputType = {
    id?: true
    vname?: true
    idlfile?: true
    idlname?: true
    microserviceId?: true
    _all?: true
  }

  export type VersionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Version to aggregate.
     */
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     */
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Versions
    **/
    _count?: true | VersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VersionMaxAggregateInputType
  }

  export type GetVersionAggregateType<T extends VersionAggregateArgs> = {
        [P in keyof T & keyof AggregateVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVersion[P]>
      : GetScalarType<T[P], AggregateVersion[P]>
  }




  export type VersionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VersionWhereInput
    orderBy?: Enumerable<VersionOrderByWithAggregationInput>
    by: VersionScalarFieldEnum[]
    having?: VersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VersionCountAggregateInputType | true
    _min?: VersionMinAggregateInputType
    _max?: VersionMaxAggregateInputType
  }


  export type VersionGroupByOutputType = {
    id: string
    vname: string
    idlfile: Buffer
    idlname: string
    microserviceId: string | null
    _count: VersionCountAggregateOutputType | null
    _min: VersionMinAggregateOutputType | null
    _max: VersionMaxAggregateOutputType | null
  }

  type GetVersionGroupByPayload<T extends VersionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VersionGroupByOutputType[P]>
            : GetScalarType<T[P], VersionGroupByOutputType[P]>
        }
      >
    >


  export type VersionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vname?: boolean
    idlfile?: boolean
    idlname?: boolean
    microserviceId?: boolean
    microservice?: boolean | MicroserviceArgs<ExtArgs>
  }, ExtArgs["result"]["version"]>

  export type VersionSelectScalar = {
    id?: boolean
    vname?: boolean
    idlfile?: boolean
    idlname?: boolean
    microserviceId?: boolean
  }

  export type VersionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    microservice?: boolean | MicroserviceArgs<ExtArgs>
  }


  type VersionGetPayload<S extends boolean | null | undefined | VersionArgs> = $Types.GetResult<VersionPayload, S>

  type VersionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VersionFindManyArgs, 'select' | 'include'> & {
      select?: VersionCountAggregateInputType | true
    }

  export interface VersionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Version'], meta: { name: 'Version' } }
    /**
     * Find zero or one Version that matches the filter.
     * @param {VersionFindUniqueArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VersionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VersionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Version'> extends True ? Prisma__VersionClient<$Types.GetResult<VersionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__VersionClient<$Types.GetResult<VersionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Version that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VersionFindUniqueOrThrowArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VersionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VersionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VersionClient<$Types.GetResult<VersionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Version that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindFirstArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VersionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VersionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Version'> extends True ? Prisma__VersionClient<$Types.GetResult<VersionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__VersionClient<$Types.GetResult<VersionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Version that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindFirstOrThrowArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VersionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VersionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VersionClient<$Types.GetResult<VersionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Versions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Versions
     * const versions = await prisma.version.findMany()
     * 
     * // Get first 10 Versions
     * const versions = await prisma.version.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const versionWithIdOnly = await prisma.version.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VersionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VersionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<VersionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Version.
     * @param {VersionCreateArgs} args - Arguments to create a Version.
     * @example
     * // Create one Version
     * const Version = await prisma.version.create({
     *   data: {
     *     // ... data to create a Version
     *   }
     * })
     * 
    **/
    create<T extends VersionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VersionCreateArgs<ExtArgs>>
    ): Prisma__VersionClient<$Types.GetResult<VersionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Versions.
     *     @param {VersionCreateManyArgs} args - Arguments to create many Versions.
     *     @example
     *     // Create many Versions
     *     const version = await prisma.version.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VersionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VersionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Version.
     * @param {VersionDeleteArgs} args - Arguments to delete one Version.
     * @example
     * // Delete one Version
     * const Version = await prisma.version.delete({
     *   where: {
     *     // ... filter to delete one Version
     *   }
     * })
     * 
    **/
    delete<T extends VersionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VersionDeleteArgs<ExtArgs>>
    ): Prisma__VersionClient<$Types.GetResult<VersionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Version.
     * @param {VersionUpdateArgs} args - Arguments to update one Version.
     * @example
     * // Update one Version
     * const version = await prisma.version.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VersionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VersionUpdateArgs<ExtArgs>>
    ): Prisma__VersionClient<$Types.GetResult<VersionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Versions.
     * @param {VersionDeleteManyArgs} args - Arguments to filter Versions to delete.
     * @example
     * // Delete a few Versions
     * const { count } = await prisma.version.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VersionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VersionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Versions
     * const version = await prisma.version.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VersionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VersionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Version.
     * @param {VersionUpsertArgs} args - Arguments to update or create a Version.
     * @example
     * // Update or create a Version
     * const version = await prisma.version.upsert({
     *   create: {
     *     // ... data to create a Version
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Version we want to update
     *   }
     * })
    **/
    upsert<T extends VersionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VersionUpsertArgs<ExtArgs>>
    ): Prisma__VersionClient<$Types.GetResult<VersionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionCountArgs} args - Arguments to filter Versions to count.
     * @example
     * // Count the number of Versions
     * const count = await prisma.version.count({
     *   where: {
     *     // ... the filter for the Versions we want to count
     *   }
     * })
    **/
    count<T extends VersionCountArgs>(
      args?: Subset<T, VersionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VersionAggregateArgs>(args: Subset<T, VersionAggregateArgs>): Prisma.PrismaPromise<GetVersionAggregateType<T>>

    /**
     * Group by Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VersionGroupByArgs['orderBy'] }
        : { orderBy?: VersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Version.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VersionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    microservice<T extends MicroserviceArgs<ExtArgs> = {}>(args?: Subset<T, MicroserviceArgs<ExtArgs>>): Prisma__MicroserviceClient<$Types.GetResult<MicroservicePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Version base type for findUnique actions
   */
  export type VersionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Version to fetch.
     */
    where: VersionWhereUniqueInput
  }

  /**
   * Version findUnique
   */
  export interface VersionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VersionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Version findUniqueOrThrow
   */
  export type VersionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Version to fetch.
     */
    where: VersionWhereUniqueInput
  }


  /**
   * Version base type for findFirst actions
   */
  export type VersionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Version to fetch.
     */
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     */
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Versions.
     */
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Versions.
     */
    distinct?: Enumerable<VersionScalarFieldEnum>
  }

  /**
   * Version findFirst
   */
  export interface VersionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VersionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Version findFirstOrThrow
   */
  export type VersionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Version to fetch.
     */
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     */
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Versions.
     */
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Versions.
     */
    distinct?: Enumerable<VersionScalarFieldEnum>
  }


  /**
   * Version findMany
   */
  export type VersionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Versions to fetch.
     */
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     */
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Versions.
     */
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     */
    skip?: number
    distinct?: Enumerable<VersionScalarFieldEnum>
  }


  /**
   * Version create
   */
  export type VersionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * The data needed to create a Version.
     */
    data: XOR<VersionCreateInput, VersionUncheckedCreateInput>
  }


  /**
   * Version createMany
   */
  export type VersionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Versions.
     */
    data: Enumerable<VersionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Version update
   */
  export type VersionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * The data needed to update a Version.
     */
    data: XOR<VersionUpdateInput, VersionUncheckedUpdateInput>
    /**
     * Choose, which Version to update.
     */
    where: VersionWhereUniqueInput
  }


  /**
   * Version updateMany
   */
  export type VersionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Versions.
     */
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyInput>
    /**
     * Filter which Versions to update
     */
    where?: VersionWhereInput
  }


  /**
   * Version upsert
   */
  export type VersionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * The filter to search for the Version to update in case it exists.
     */
    where: VersionWhereUniqueInput
    /**
     * In case the Version found by the `where` argument doesn't exist, create a new Version with this data.
     */
    create: XOR<VersionCreateInput, VersionUncheckedCreateInput>
    /**
     * In case the Version was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VersionUpdateInput, VersionUncheckedUpdateInput>
  }


  /**
   * Version delete
   */
  export type VersionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter which Version to delete.
     */
    where: VersionWhereUniqueInput
  }


  /**
   * Version deleteMany
   */
  export type VersionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Versions to delete
     */
    where?: VersionWhereInput
  }


  /**
   * Version without action
   */
  export type VersionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VersionInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MicroserviceScalarFieldEnum: {
    id: 'id',
    svcname: 'svcname'
  };

  export type MicroserviceScalarFieldEnum = (typeof MicroserviceScalarFieldEnum)[keyof typeof MicroserviceScalarFieldEnum]


  export const VersionScalarFieldEnum: {
    id: 'id',
    vname: 'vname',
    idlfile: 'idlfile',
    idlname: 'idlname',
    microserviceId: 'microserviceId'
  };

  export type VersionScalarFieldEnum = (typeof VersionScalarFieldEnum)[keyof typeof VersionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type MicroserviceWhereInput = {
    AND?: Enumerable<MicroserviceWhereInput>
    OR?: Enumerable<MicroserviceWhereInput>
    NOT?: Enumerable<MicroserviceWhereInput>
    id?: StringFilter | string
    svcname?: StringFilter | string
    versions?: VersionListRelationFilter
  }

  export type MicroserviceOrderByWithRelationInput = {
    id?: SortOrder
    svcname?: SortOrder
    versions?: VersionOrderByRelationAggregateInput
  }

  export type MicroserviceWhereUniqueInput = {
    id?: string
    svcname?: string
  }

  export type MicroserviceOrderByWithAggregationInput = {
    id?: SortOrder
    svcname?: SortOrder
    _count?: MicroserviceCountOrderByAggregateInput
    _max?: MicroserviceMaxOrderByAggregateInput
    _min?: MicroserviceMinOrderByAggregateInput
  }

  export type MicroserviceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MicroserviceScalarWhereWithAggregatesInput>
    OR?: Enumerable<MicroserviceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MicroserviceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    svcname?: StringWithAggregatesFilter | string
  }

  export type VersionWhereInput = {
    AND?: Enumerable<VersionWhereInput>
    OR?: Enumerable<VersionWhereInput>
    NOT?: Enumerable<VersionWhereInput>
    id?: StringFilter | string
    vname?: StringFilter | string
    idlfile?: BytesFilter | Buffer
    idlname?: StringFilter | string
    microserviceId?: StringNullableFilter | string | null
    microservice?: XOR<MicroserviceRelationFilter, MicroserviceWhereInput> | null
  }

  export type VersionOrderByWithRelationInput = {
    id?: SortOrder
    vname?: SortOrder
    idlfile?: SortOrder
    idlname?: SortOrder
    microserviceId?: SortOrderInput | SortOrder
    microservice?: MicroserviceOrderByWithRelationInput
  }

  export type VersionWhereUniqueInput = {
    id?: string
  }

  export type VersionOrderByWithAggregationInput = {
    id?: SortOrder
    vname?: SortOrder
    idlfile?: SortOrder
    idlname?: SortOrder
    microserviceId?: SortOrderInput | SortOrder
    _count?: VersionCountOrderByAggregateInput
    _max?: VersionMaxOrderByAggregateInput
    _min?: VersionMinOrderByAggregateInput
  }

  export type VersionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VersionScalarWhereWithAggregatesInput>
    OR?: Enumerable<VersionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VersionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    vname?: StringWithAggregatesFilter | string
    idlfile?: BytesWithAggregatesFilter | Buffer
    idlname?: StringWithAggregatesFilter | string
    microserviceId?: StringNullableWithAggregatesFilter | string | null
  }

  export type MicroserviceCreateInput = {
    id?: string
    svcname: string
    versions?: VersionCreateNestedManyWithoutMicroserviceInput
  }

  export type MicroserviceUncheckedCreateInput = {
    id?: string
    svcname: string
    versions?: VersionUncheckedCreateNestedManyWithoutMicroserviceInput
  }

  export type MicroserviceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    svcname?: StringFieldUpdateOperationsInput | string
    versions?: VersionUpdateManyWithoutMicroserviceNestedInput
  }

  export type MicroserviceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    svcname?: StringFieldUpdateOperationsInput | string
    versions?: VersionUncheckedUpdateManyWithoutMicroserviceNestedInput
  }

  export type MicroserviceCreateManyInput = {
    id?: string
    svcname: string
  }

  export type MicroserviceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    svcname?: StringFieldUpdateOperationsInput | string
  }

  export type MicroserviceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    svcname?: StringFieldUpdateOperationsInput | string
  }

  export type VersionCreateInput = {
    id?: string
    vname: string
    idlfile: Buffer
    idlname: string
    microservice?: MicroserviceCreateNestedOneWithoutVersionsInput
  }

  export type VersionUncheckedCreateInput = {
    id?: string
    vname: string
    idlfile: Buffer
    idlname: string
    microserviceId?: string | null
  }

  export type VersionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    vname?: StringFieldUpdateOperationsInput | string
    idlfile?: BytesFieldUpdateOperationsInput | Buffer
    idlname?: StringFieldUpdateOperationsInput | string
    microservice?: MicroserviceUpdateOneWithoutVersionsNestedInput
  }

  export type VersionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    vname?: StringFieldUpdateOperationsInput | string
    idlfile?: BytesFieldUpdateOperationsInput | Buffer
    idlname?: StringFieldUpdateOperationsInput | string
    microserviceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VersionCreateManyInput = {
    id?: string
    vname: string
    idlfile: Buffer
    idlname: string
    microserviceId?: string | null
  }

  export type VersionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    vname?: StringFieldUpdateOperationsInput | string
    idlfile?: BytesFieldUpdateOperationsInput | Buffer
    idlname?: StringFieldUpdateOperationsInput | string
  }

  export type VersionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    vname?: StringFieldUpdateOperationsInput | string
    idlfile?: BytesFieldUpdateOperationsInput | Buffer
    idlname?: StringFieldUpdateOperationsInput | string
    microserviceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type VersionListRelationFilter = {
    every?: VersionWhereInput
    some?: VersionWhereInput
    none?: VersionWhereInput
  }

  export type VersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MicroserviceCountOrderByAggregateInput = {
    id?: SortOrder
    svcname?: SortOrder
  }

  export type MicroserviceMaxOrderByAggregateInput = {
    id?: SortOrder
    svcname?: SortOrder
  }

  export type MicroserviceMinOrderByAggregateInput = {
    id?: SortOrder
    svcname?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BytesFilter = {
    equals?: Buffer
    in?: Enumerable<Buffer> | Buffer
    notIn?: Enumerable<Buffer> | Buffer
    not?: NestedBytesFilter | Buffer
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type MicroserviceRelationFilter = {
    is?: MicroserviceWhereInput | null
    isNot?: MicroserviceWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type VersionCountOrderByAggregateInput = {
    id?: SortOrder
    vname?: SortOrder
    idlfile?: SortOrder
    idlname?: SortOrder
    microserviceId?: SortOrder
  }

  export type VersionMaxOrderByAggregateInput = {
    id?: SortOrder
    vname?: SortOrder
    idlfile?: SortOrder
    idlname?: SortOrder
    microserviceId?: SortOrder
  }

  export type VersionMinOrderByAggregateInput = {
    id?: SortOrder
    vname?: SortOrder
    idlfile?: SortOrder
    idlname?: SortOrder
    microserviceId?: SortOrder
  }

  export type BytesWithAggregatesFilter = {
    equals?: Buffer
    in?: Enumerable<Buffer> | Buffer
    notIn?: Enumerable<Buffer> | Buffer
    not?: NestedBytesWithAggregatesFilter | Buffer
    _count?: NestedIntFilter
    _min?: NestedBytesFilter
    _max?: NestedBytesFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type VersionCreateNestedManyWithoutMicroserviceInput = {
    create?: XOR<Enumerable<VersionCreateWithoutMicroserviceInput>, Enumerable<VersionUncheckedCreateWithoutMicroserviceInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutMicroserviceInput>
    createMany?: VersionCreateManyMicroserviceInputEnvelope
    connect?: Enumerable<VersionWhereUniqueInput>
  }

  export type VersionUncheckedCreateNestedManyWithoutMicroserviceInput = {
    create?: XOR<Enumerable<VersionCreateWithoutMicroserviceInput>, Enumerable<VersionUncheckedCreateWithoutMicroserviceInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutMicroserviceInput>
    createMany?: VersionCreateManyMicroserviceInputEnvelope
    connect?: Enumerable<VersionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type VersionUpdateManyWithoutMicroserviceNestedInput = {
    create?: XOR<Enumerable<VersionCreateWithoutMicroserviceInput>, Enumerable<VersionUncheckedCreateWithoutMicroserviceInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutMicroserviceInput>
    upsert?: Enumerable<VersionUpsertWithWhereUniqueWithoutMicroserviceInput>
    createMany?: VersionCreateManyMicroserviceInputEnvelope
    set?: Enumerable<VersionWhereUniqueInput>
    disconnect?: Enumerable<VersionWhereUniqueInput>
    delete?: Enumerable<VersionWhereUniqueInput>
    connect?: Enumerable<VersionWhereUniqueInput>
    update?: Enumerable<VersionUpdateWithWhereUniqueWithoutMicroserviceInput>
    updateMany?: Enumerable<VersionUpdateManyWithWhereWithoutMicroserviceInput>
    deleteMany?: Enumerable<VersionScalarWhereInput>
  }

  export type VersionUncheckedUpdateManyWithoutMicroserviceNestedInput = {
    create?: XOR<Enumerable<VersionCreateWithoutMicroserviceInput>, Enumerable<VersionUncheckedCreateWithoutMicroserviceInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutMicroserviceInput>
    upsert?: Enumerable<VersionUpsertWithWhereUniqueWithoutMicroserviceInput>
    createMany?: VersionCreateManyMicroserviceInputEnvelope
    set?: Enumerable<VersionWhereUniqueInput>
    disconnect?: Enumerable<VersionWhereUniqueInput>
    delete?: Enumerable<VersionWhereUniqueInput>
    connect?: Enumerable<VersionWhereUniqueInput>
    update?: Enumerable<VersionUpdateWithWhereUniqueWithoutMicroserviceInput>
    updateMany?: Enumerable<VersionUpdateManyWithWhereWithoutMicroserviceInput>
    deleteMany?: Enumerable<VersionScalarWhereInput>
  }

  export type MicroserviceCreateNestedOneWithoutVersionsInput = {
    create?: XOR<MicroserviceCreateWithoutVersionsInput, MicroserviceUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: MicroserviceCreateOrConnectWithoutVersionsInput
    connect?: MicroserviceWhereUniqueInput
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Buffer
  }

  export type MicroserviceUpdateOneWithoutVersionsNestedInput = {
    create?: XOR<MicroserviceCreateWithoutVersionsInput, MicroserviceUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: MicroserviceCreateOrConnectWithoutVersionsInput
    upsert?: MicroserviceUpsertWithoutVersionsInput
    disconnect?: boolean
    delete?: boolean
    connect?: MicroserviceWhereUniqueInput
    update?: XOR<MicroserviceUpdateWithoutVersionsInput, MicroserviceUncheckedUpdateWithoutVersionsInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedBytesFilter = {
    equals?: Buffer
    in?: Enumerable<Buffer> | Buffer
    notIn?: Enumerable<Buffer> | Buffer
    not?: NestedBytesFilter | Buffer
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBytesWithAggregatesFilter = {
    equals?: Buffer
    in?: Enumerable<Buffer> | Buffer
    notIn?: Enumerable<Buffer> | Buffer
    not?: NestedBytesWithAggregatesFilter | Buffer
    _count?: NestedIntFilter
    _min?: NestedBytesFilter
    _max?: NestedBytesFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type VersionCreateWithoutMicroserviceInput = {
    id?: string
    vname: string
    idlfile: Buffer
    idlname: string
  }

  export type VersionUncheckedCreateWithoutMicroserviceInput = {
    id?: string
    vname: string
    idlfile: Buffer
    idlname: string
  }

  export type VersionCreateOrConnectWithoutMicroserviceInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutMicroserviceInput, VersionUncheckedCreateWithoutMicroserviceInput>
  }

  export type VersionCreateManyMicroserviceInputEnvelope = {
    data: Enumerable<VersionCreateManyMicroserviceInput>
    skipDuplicates?: boolean
  }

  export type VersionUpsertWithWhereUniqueWithoutMicroserviceInput = {
    where: VersionWhereUniqueInput
    update: XOR<VersionUpdateWithoutMicroserviceInput, VersionUncheckedUpdateWithoutMicroserviceInput>
    create: XOR<VersionCreateWithoutMicroserviceInput, VersionUncheckedCreateWithoutMicroserviceInput>
  }

  export type VersionUpdateWithWhereUniqueWithoutMicroserviceInput = {
    where: VersionWhereUniqueInput
    data: XOR<VersionUpdateWithoutMicroserviceInput, VersionUncheckedUpdateWithoutMicroserviceInput>
  }

  export type VersionUpdateManyWithWhereWithoutMicroserviceInput = {
    where: VersionScalarWhereInput
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyWithoutVersionsInput>
  }

  export type VersionScalarWhereInput = {
    AND?: Enumerable<VersionScalarWhereInput>
    OR?: Enumerable<VersionScalarWhereInput>
    NOT?: Enumerable<VersionScalarWhereInput>
    id?: StringFilter | string
    vname?: StringFilter | string
    idlfile?: BytesFilter | Buffer
    idlname?: StringFilter | string
    microserviceId?: StringNullableFilter | string | null
  }

  export type MicroserviceCreateWithoutVersionsInput = {
    id?: string
    svcname: string
  }

  export type MicroserviceUncheckedCreateWithoutVersionsInput = {
    id?: string
    svcname: string
  }

  export type MicroserviceCreateOrConnectWithoutVersionsInput = {
    where: MicroserviceWhereUniqueInput
    create: XOR<MicroserviceCreateWithoutVersionsInput, MicroserviceUncheckedCreateWithoutVersionsInput>
  }

  export type MicroserviceUpsertWithoutVersionsInput = {
    update: XOR<MicroserviceUpdateWithoutVersionsInput, MicroserviceUncheckedUpdateWithoutVersionsInput>
    create: XOR<MicroserviceCreateWithoutVersionsInput, MicroserviceUncheckedCreateWithoutVersionsInput>
  }

  export type MicroserviceUpdateWithoutVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    svcname?: StringFieldUpdateOperationsInput | string
  }

  export type MicroserviceUncheckedUpdateWithoutVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    svcname?: StringFieldUpdateOperationsInput | string
  }

  export type VersionCreateManyMicroserviceInput = {
    id?: string
    vname: string
    idlfile: Buffer
    idlname: string
  }

  export type VersionUpdateWithoutMicroserviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    vname?: StringFieldUpdateOperationsInput | string
    idlfile?: BytesFieldUpdateOperationsInput | Buffer
    idlname?: StringFieldUpdateOperationsInput | string
  }

  export type VersionUncheckedUpdateWithoutMicroserviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    vname?: StringFieldUpdateOperationsInput | string
    idlfile?: BytesFieldUpdateOperationsInput | Buffer
    idlname?: StringFieldUpdateOperationsInput | string
  }

  export type VersionUncheckedUpdateManyWithoutVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    vname?: StringFieldUpdateOperationsInput | string
    idlfile?: BytesFieldUpdateOperationsInput | Buffer
    idlname?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}